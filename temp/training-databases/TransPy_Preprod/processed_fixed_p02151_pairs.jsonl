{"input": "translate Python to C++: def inpl(): return list(map(int, input().split()))\nfrom collections import defaultdict\nfrom itertools import combinations, permutations\n\nN = int(input())\nS = list(map(int, input()))\n\nmove = defaultdict(int)\nb = S[0]\nfor i in range(N-1):\n    a, b = S[i], S[i+1]\n    move[(a, b)] += 1\n    move[(b, a)] += 1\n\nR = set(list(range(1, 10)))\nbestscore = 10**10\nbestans = \"9\"*9\n\ndef calc_br(bl, re):\n    b0, b1, b2, b3 = bl\n    r0, r1, r2, r3 = re\n    stage3 = 0\n    stage3 += move[(b0, r3)] + move[(b0, r0)] + 3*move[(b0, r1)] + 3*move[(b0, r2)]\n    stage3 += move[(b1, r0)] + move[(b1, r1)] + 3*move[(b1, r2)] + 3*move[(b1, r3)]\n    stage3 += move[(b2, r1)] + move[(b2, r2)] + 3*move[(b2, r3)] + 3*move[(b2, r0)]\n    stage3 += move[(b3, r2)] + move[(b3, r3)] + 3*move[(b3, r0)] + 3*move[(b3, r1)]\n    return stage3\n    \n    \ndef fliplr(black, bl, re):\n    order = [bl[0], re[0], bl[1],\n             re[3], black, re[1],\n             bl[3], re[2], bl[2]]\n    best = [9] * 9\n    ixss = [[0, 1, 2, 3, 4, 5, 6, 7, 8],\n            [2, 5, 8, 1, 4, 7, 0, 3, 6],\n            [8, 7, 6, 5, 4, 3, 2, 1, 0],\n            [6, 3, 0, 7, 4, 1, 8, 5, 2],\n            [2, 1, 0, 5, 4, 3, 8, 7, 6],\n            [0, 3, 6, 1, 4, 7, 2, 5, 8],\n            [6, 7, 8, 3, 4, 5, 0, 1, 2],\n            [8, 5, 2, 7, 4, 1, 6, 3, 0]]\n    best = min([\"\".join([str(order[ix]) for ix in ixs]) for ixs in ixss])\n    return best\n    \n    \nfor black in range(1, 10):\n    remain = R.difference([black])\n    for blue in combinations(remain, r=4):\n        red = list(remain - set(blue))\n        stage1 = 0\n        for r in red:\n            stage1 += move[(black, r)]\n        for b in blue:\n            stage1 += move[(black, b)] * 2\n        for r1, r2 in combinations(red, 2):\n            stage1 += move[(r1, r2)] * 2\n    \n        for bixs in [[0, 1, 2, 3], [0, 2, 3, 1], [0, 3, 1, 2]]:\n            bl = [blue[bix] for bix in bixs]\n            stage2 = (move[(bl[0], bl[1])] +\n                      move[(bl[1], bl[2])] +\n                      move[(bl[2], bl[3])] +\n                      move[(bl[3], bl[0])] +\n                      move[(bl[0], bl[2])]*2 +\n                      move[(bl[1], bl[3])]*2)*2\n            \n            for re in permutations(red, 4):\n                stage3 = calc_br(bl, re)\n                score = stage1 + stage2 + stage3\n                #if score == 11:\n                #    print(black, bl, re)\n                #print(stage1, stage2, stage3)\n                if score <= bestscore:\n                    if score < bestscore:\n                        bestans = \"9\"*9\n                    bestscore = score\n                    bestans = min(bestans, fliplr(black, bl, re))\nprint(\"\".join((map(str, bestans[:3]))))\nprint(\"\".join((map(str, bestans[3:6]))))\nprint(\"\".join((map(str, bestans[6:]))))\n\nGiven input: 10\n1236547896\n\nExpected output: 123\n456\n789\n", "output": "#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int MOD = 1000000007LL;\nconst int INF = LLONG_MAX;\n\nsigned main(){\n    \n    int n; cin >> n;\n    string s; cin >> s;\n    int G[10][10] = {};\n    for(int i = 1; i < n; i++){\n        int cur = (int)(s[i - 1] - '0');\n        int nxt = (int)(s[i] - '0');\n        G[cur][nxt]++;\n    }\n    \n    vector<int> vec(9);\n    for(int i = 0; i < 9; i++) vec[i] = i + 1;\n    int ans = INF;\n    vector<int> ansV(9);\n    \n    do{\n        int phone[3][3];\n        for(int j = 0; j < 3; j++){\n            for(int i = 0; i < 3; i++){\n                phone[i][j] = vec[3 * j + i];\n            }\n        }\n\n        int cost = 0;\n        for(int ci = 0; ci < 3; ci++){\n            for(int cj = 0; cj < 3; cj++){\n                for(int ni = 0; ni < 3; ni++){\n                    for(int nj = 0; nj < 3; nj++){\n                        int cur = phone[ci][cj];\n                        int nxt = phone[ni][nj];\n                        int dis = (int)abs(ci - ni) + (int)abs(cj - nj);\n                        cost += G[cur][nxt] * dis;\n                    }\n                }\n            }\n        }\n\n        if(cost < ans){\n            ans = cost;\n            ansV = vec;\n        }\n\n    }while(next_permutation(vec.begin(), vec.end()));\n    \n    for(int j = 0; j < 3; j++){\n        for(int i = 0; i < 3; i++){\n            cout << ansV[3 * j + i];\n        }\n        cout << endl;\n    }\n    return 0;\n}\n"}
