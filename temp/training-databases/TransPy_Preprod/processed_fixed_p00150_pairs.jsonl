{"input": "translate Python to C++: # -*- coding: utf-8 -*-\n\"\"\"\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom bisect import bisect_right\ninput = stdin.readline\n\n\ndef create_prime_list(limit):\n    \"\"\" ??\u00a8??????????????????????????\u00a7limit?????\u00a7????\u00b4???\u00b0?????????????\u00b1???????\n    https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9\n    \"\"\"\n    x = limit**0.5\n    primes = []\n    nums = [x for x in range(2, limit+1)]\n    while nums[0]<=x:\n        primes.append(nums[0])\n        current_prime = nums[0]\n        nums = [x for x in nums if x%current_prime != 0]\n    primes.extend(nums)\n    return primes\n\n\ndef main(args):\n    # ??????????\u00b4???\u00b0?????????\n    primes = create_prime_list(10000)\n    twin_primes = []\n\n\n    # prev = primes[0]\n    # for p in primes[1:]:\n    #     if p == prev + 2:\n    #         twin_primes.append([prev, p])\n    #     prev = p\n    #\n    # keys = [x[1] for x in twin_primes]\n    # while True:\n    #     n = int(input())\n    #     if n == 0:\n    #         break\n    #     r = bisect_right(keys, n)\n    #     print(*twin_primes[r-1])\n\n    prev = primes[0]\n    for p in primes[1:]:\n         if p == prev + 2:\n             twin_primes.append(p)\n         prev = p\n\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        r = bisect_right(twin_primes, n)\n        print(twin_primes[r-1]-2, twin_primes[r-1])\n\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    \nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <algorithm>\n#include <cmath>\n#include <string>\n#include <vector>\n#include <list>\n#include <queue>\n#include <stack>\n#include <set>\n#include <map>\n#include <bitset>\n#include <numeric>\n#include <climits>\n#include <cfloat>\nusing namespace std;\n\nvoid makePrimeNumber(int N, vector<bool>& prime) // 0\u30c4\u6697\u6309\u6e58\u300dN\u30c4\u6697\u6309\u53ef\u30b3\u30c4\u3065\u500b\u9752\u30e7\u30c4\u9752\u677f\u3064\u30a5\u30c4\u3065\u30a1\u30c4\u7d20\u30c4\u9752\u677f\u3065\u30fc\u30c4\u63a2\u30c4\u3064\u30ad\n{\n    prime.assign(N+1, true);\n    prime [0] = prime[1] = false;\n    for(int i=2; i*i<=N; i++){\n        if(prime[i]){\n            for(int j=i; i*j<=N; j++){\n                prime[i*j] = false;\n            }\n        }\n    }\n}\n\nint main()\n{\n    vector<bool> prime;\n    makePrimeNumber(10000, prime);\n\n    vector<int> ret(10001);\n    for(int i=5; i<=10000; ++i){\n        if(prime[i] && prime[i-2])\n            ret[i] = i;\n        else\n            ret[i] = ret[i-1];\n    }\n\n    for(;;){\n        int n;\n        cin >> n;\n        if(n == 0)\n            return 0;\n\n        cout << (ret[n]-2) << ' ' << ret[n] << endl;\n    }\n}"}
{"input": "translate Python to C++: n=1000000\np=[1]*(n+1)\np[0],p[1]=0,0\nfor i in range(2,int(n**0.5)+1):\n    if p[i]:        \n        for j in range(i*i,n+1,i):\n            p[j]=0\n#p=[i for i in range(n+1) if p[i]==1]\nwhile 1:\n    n=int(input())\n    if n==0: break\n    for i in range(n,2,-1):\n        if (p[i],p[i-2])==(1,1):\n            print(i-2,i)\n            break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\n#include <time.h>\nint isprime(int n){\n\tfor(int i = 2; i < n; i++){\n\t\tif(n % i == 0){\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 1;\n}\nint main() {\n\tint i,p,q,n;\n\twhile(1){\n\t\tscanf(\"%d\",&n);\n\t\tif(n == 0){\n\t\t\tbreak;\n\t\t}\n\t\tfor(i=n;i>=0;i--){\n\t\t\tif(isprime(i) == 1 && isprime(i-2) == 1){\n\t\t\t\tp = i;\n\t\t\t\tq = i-2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\",q,p);\n\t}\n\treturn 0;\n}\n\n\n\t// clock_t start, now;\n\t// now = clock();\n\t// printf(\"%f\\n\",(double)(now - start) / CLOCKS_PER_SEC);"}
{"input": "translate Python to C++: from itertools import takewhile\npnum, tmp = [], [int(i) for i in range(2, 10000)]\nwhile tmp[0] < 101:\n    v = tmp.pop(0)\n    pnum.append(v)\n    tmp = list(filter(lambda x: x%v!=0, tmp))\nfor t in tmp: pnum.append(t)\ndel pnum[0:2]\nwhile True:\n    n = int(input())\n    if n==0: break\n    prime = list(takewhile(lambda x: x<n, pnum))\n    for i in range(len(prime))[:0:-1]:\n        if prime[i]-prime[i-1]==2:\n            print(prime[i-1], prime[i])\n            break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\n#include<math.h>\n\nint\tPrime(int\tx){\n\tint\tn;\n\tif(x\t==\t2)return\t1;\n\tif(x\t%\t2\t==\t0)return\t0;\n\tfor(n\t=\t3;\tn\t<=\tsqrt((double)x);\tn\t+=\t2){\n\t\tif(x\t%\tn\t==\t0)return\t0;\n\t\treturn\t1;\n\t}\n}\n\nint\tmain(){\n\tint\tn,\ti,\tcnt\t=\t1,\tmax\t=\t0,\tdata[10000];\n\tscanf(\"%d\",\t&n);\n\tfor(i\t=\t2;\ti\t<=\tn;\ti++){\n\t\tif(Prime(i)){\n\t\t\tdata[cnt]\t=\ti;\n\t\t\tif(data[cnt]\t-\tdata[cnt\t-\t1]\t==\t2)max\t=\tcnt;\n\t\t\tcnt++;\n\t\t}\t\n\t}\n\tprintf(\"%d %d\\n\",\tdata[max - 1],\tdata[max]);\n\treturn\t0;\n}"}
{"input": "translate Python to C++: def primes(n):\n  tf = [True] * (n + 1)\n  tf[0] = tf[1] = False\n  for i in range(2, int(n ** (1 / 2)) + 1):\n    if tf[i]:\n      for j in range(i ** 2, n + 1, i):\n        tf[j] = False\n  return [i for i in range(n + 1) if tf[i]]\n\ndef add_twin(prime_lst, twin_lst):\n  prime_lst2 = prime_lst[1:]\n  for x, y in zip(prime_lst, prime_lst2):\n    if y - x == 2:\n      twin_lst.append(y)\n\ndef search_twin(x, twin_lst):\n  left = 0\n  right = len(twin_lst)\n  while left + 1 < right:\n    mid = (left + right) // 2\n    if twin_lst[mid] > x:\n      right = mid\n    elif twin_lst[mid] < x:\n      left = mid\n    else:\n      return x\n  return twin_lst[left]\n\nprime_lst = primes(10000)\ntwin_lst = []\nadd_twin(prime_lst, twin_lst)\n\nwhile True:\n  n = int(input())\n  if n == 0:\n    break\n  a = search_twin(n, twin_lst)\n  print(a - 2, a)\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "int i,j,k;char s[9];p(int n){if(n<2)return 0;else if(n==2)return 1;if(n%2==0)return 0;for(i=3;i*i<=n;i+=2)if(n%i==0)return 0;return 1;}main(){while(scanf(\"%d\",&j)){if(!j)break;while(k++<j){if(p(k-1)&&p(k-3)){sprintf(s,\"%d %d\",k-3,k-1);}}puts(s);}}"}
{"input": "translate Python to C++: # AOJ 0150 Twin Prime\n# Python3 2018.6.17 bal4u\n\nMAX = 10001\nSQRT = 100     # sqrt(MAX)\n\nprime = [True for i in range(MAX)]\ndef sieve():\n\tfor i in range(4, MAX, 2):\n\t\tprime[i] = False\n\tfor i in range(3, SQRT, 2):\n\t\tif prime[i] is True:\n\t\t\tfor j in range(i*i, MAX, i):\n\t\t\t\tprime[j] = False\nsieve()\ntbl = [0]*MAX\nans = 0\nfor i in range(5, MAX, 2):\n\tif prime[i] and prime[i-2]: ans = i\n\ttbl[i] = ans\n\t\nwhile True:\n\tn = int(input())\n\tif n == 0: break\n\tif (n & 1) == 0: n -= 1\n\tprint(tbl[n]-2, tbl[n])\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<iostream>\n#include<algorithm>\nusing namespace std;\n\nbool p[1000100];\n\nvoid erato(){\n    fill(p, p+1000100, true);\n    p[0] = p[1] = false;\n\n    for(int i=0; i < 1000100; i++){\n        if(!p[i]) continue;\n        for(int j=i+i; j < 1000100; j += i){\n            p[j] = false;\n        }\n    }\n}\n\nint main(){\n    erato();\n    int n;\n    while(cin >> n, n){\n        for(int i=n; ; i--)if(p[i] && p[i-2]){cout << i-2 << \" \" << i << endl;break;}\n    }\n}"}
{"input": "translate Python to C++: from itertools import takewhile\npnum, tmp = [], [i for i in range(2, 10000)]\nwhile tmp[0] < 101:\n    v = tmp.pop(0)\n    pnum.append(v)\n    tmp = list(filter(lambda x: x%v!=0, tmp))\nfor t in tmp: pnum.append(t)\ndel pnum[0:2]\nwhile True:\n    n = int(input())\n    if n==0: break\n    prime = list(takewhile(lambda x: x<=n, pnum))\n    for i in range(len(prime))[:0:-1]:\n        if prime[i]-prime[i-1]==2:\n            print(prime[i-1], prime[i])\n            break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "int main(void){\n\tint i,j;\n\tint isprime[1000];\n\tfor(i=0;i<=1000;i++){\n \t\tisprime[i]=1;\n\t}\n\tisprime[0]=isprime[1]=0;\n\tfor(i=2;i<=1000;i++){\n \t\tif(isprime[i]==1){\n \t\t\tfor(j=2*i;j<=1000;j+=i){\n\t\t\t\tisprime[j]=0;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=2;i<=1000;i++){\n\t\tif(isprime[i-2]==1 && isprime[i]==1){\n\t\t\tprintf(\"(%d,%d)\",i-2,i);\n\t\t}\n\t}\n\treturn 0;\n }"}
{"input": "translate Python to C++: MN = 10000\ntp = []\nop = -5\nmem = [False * 2] + [True] * MN\nfor i in range(2, MN):\n  if not mem[i]:\n    continue\n  if i - op == 2:\n    tp.append((op, i))\n  op = i\n  for j in range(i + i, MN, i):\n    mem[j] = False\ntp.append((MN + 1, MN + 1))\nwhile True:\n  N = input()\n  if not N:\n    break\n  for i, p in enumerate(tp):\n    if p[1] > N:\n      print('%d %d' % (tp[i - 1][0], tp[i - 1][1]))\n      break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\n\nint isprime( int n ) {\n  for( int i = 2; i * i <= n; i++ ) {\n    if( n % i == 0 ) return 0;\n  }\n  return 1;\n}\n\nint main() {\n  int n, i, p1, q1, result, resultt;\n  for( ;; ) {\n    scanf( \"%d\", &n );\n    if( n == 0 )break;\n    for( i = n; i >= 0; i-- ) {\n      result = isprime( i );\n      resultt = isprime( i - 2 );\n      if( result == 1 && resultt == 1 ) {\n        q1 = i;\n        p1 = q1 - 2;\n        break;\n      }\n    }\n    printf( \"%d %d\\n\", p1, q1 );\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: import math\n\nMAX = 10000\n\n\ndef is_prime_number(num):\n    for divisor in range(3, int(math.sqrt(num) + 1), 2):\n        if num % divisor == 0:\n            return False\n\n    return True\n\n\ndef create_prime_number_list(max):\n    prime_number_list = list(range(0, max + 1))\n\n    prime_number_list[0] = False\n    prime_number_list[1] = False\n\n    for index in range(2 * 2, max + 1, 2):\n        prime_number_list[index] = False\n\n    for num in range(3, int(math.sqrt(max + 1)), 2):\n\n        if is_prime_number(num):\n            for index in range(num * 2, max + 1, num):\n                prime_number_list[index] = False\n\n    return prime_number_list\n\n\nprime_number_list = create_prime_number_list(MAX)\noutput = []\n\nwhile True:\n\n    num = int(input())\n\n    if num == 0:\n        break\n\n    if num % 2 == 0:\n        num -= 1\n\n    for index in range(num, 0, -2):\n        if prime_number_list[index - 2] and prime_number_list[index]:\n            output.append(str(index - 2) + \" \" + str(index))\n            break\n\nprint(\"\\n\".join(output))\n\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#define _USE_MATH_DEFINES\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n//#define int long long\n#define DBG 1\n#define dump(o) if(DBG){cerr<<#o<<\" \"<<o<<endl;}\n#define dumpc(o) if(DBG){cerr<<#o; for(auto &e:(o))cerr<<\" \"<<e;cerr<<endl;}\n#define rep(i,a,b) for(int i=(a);i<(b);i++)\n#define rrep(i,a,b) for(int i=(b)-1;i>=(a);i--)\n#define each(it,c) for(auto it=(c).begin();it!=(c).end();it++)\n#define all(c) c.begin(),c.end()\nconst int INF = sizeof(int) == sizeof(long long) ? 0x3f3f3f3f3f3f3f3fLL : 0x3f3f3f3f;\nconst int MOD = (int)(1e9 + 7);\nint N = 10005;\nsigned main() {\n\tvector<bool>p(N, true);\n\tp[0] = p[1] = false;\n\trep(i, 2, sqrt(N)) {\n\t\tif (p[i]) {\n\t\t\tfor (int j = i + i; j < N; j += i) {\n\t\t\t\tp[j] = false;\n\t\t\t}\n\t\t}\n\t}\n\tint n;\n\twhile (cin >> n, n) {\n\t\tint a, b;\n\t\tfor (int i = n; i >= 0; i--) {\n\t\t\tif (p[i] && p[i - 2]) {\n\t\t\t\tcout << i - 2 << \" \" << i << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"}
{"input": "translate Python to C++: # Aizu Problem 00150: Twin Prime\n#\nimport sys, math, os, bisect\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef primes2(n):\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\n    n, correction = n-n%6+6, 2-(n%6>1)\n    sieve = [True] * (n//3)\n    for i in range(1,int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      k*k//3      ::2*k] = [False] * ((n//6-k*k//6-1)//k+1)\n        sieve[k*(k-2*(i&1)+4)//3::2*k] = [False] * ((n//6-k*(k-2*(i&1)+4)//6-1)//k+1)\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\n\nprimes = primes2(10000)\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    idx = bisect.bisect_left(primes, n)\n    while True:\n        #if idx == len(primes):\n        #    idx -= 1\n        if primes[idx] >= n:\n            idx -= 1\n        if primes[idx] - primes[idx - 1] == 2:\n            print(primes[idx - 1], primes[idx])\n            break\n        idx -= 1\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <cstring>\nusing namespace std;\n\nconst int SIZE = 10001;\n\nint main()\n{\n\tbool prime[ SIZE ];\n\tmemset( prime, 0, sizeof(prime) );\n\n\tprime[ 0 ] = prime[ 1 ] = true;\n\tfor( int i = 2; i < SIZE; ++i ){\n\t\tif( prime[ i ] ) continue;\n\t\tfor( int j = i + i; j < SIZE; j += i ){\n\t\t\tprime[ j ] = true;\n\t\t}\n\t}\n\n\tint n;\n\twhile( cin >> n && n ){\n\t\tfor( int i = ( n % 2 == 0 ? n - 1 : n ); n > 1; i -= 2 ){\n\t\t\tif( !prime[ i ] && !prime[ i - 2 ] ){\n\t\t\t\tcout << i - 2<< \" \" << i << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"}
{"input": "translate Python to C++: import bisect as bs\ndef prime(m):\n  N = range(1,m+1, 2)\n  N[0] = 2\n  for i in range(1, len(N)):\n    x = N[i]\n    if x: N[i+x::x] = [0]*len(N[i+x::x])\n  return filter(None, N)\n \nP = prime(10000)\nx = []\na = P[0]\nfor b in P[1:]:\n  if b-a==2: x.append(b)\n  a=b\nwhile 1:\n  n = int(raw_input())\n  if n==0: break\n  a = x[bs.bisect_right(x, n)-1]\n  print a-2, a\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(\"Ofast\")\n#define all(x) (x).begin(),(x).end()\n#define rep(i, n) for(int i = 0; i < (int)(n); i++)\n#define REP(i, m, n) for(int i = m; i < n; i++)\n#define INF INT_MAX\n#define MOD 1000000007\n#define fcout cout << fixed << setprecision(15)\ntypedef long long ll;\ntypedef pair<int, int> P;\nint gcd(int a,int b){return b?gcd(b,a%b):a;};\nint lcm(int a,int b){return a * b / gcd(a, b);};\nint mod(int a,int b){return (a+b-1)/b;};\nint month[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\ntemplate<class T>inline bool chmax(T& a,T b){if(a < b){a=b;return true;}return false;};\ntemplate<class T>inline bool chmin(T& a,T b){if(a > b){a=b;return true;}return false;};\n\nbool IsPrime(int num){\n  if (num < 2) return false;\n  else if (num == 2) return true;\n  else if (num % 2 == 0) return false;\n\n  double sqrtNum = sqrt(num);\n  for (int i = 3; i <= sqrtNum; i += 2) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nint main() {\n  cin.tie(0);\n  cout.tie(0);\n  ios::sync_with_stdio(false);\n\n  int n;\n  while(true) {\n    cin >> n;\n    if(n == 0) break;\n    for(int i = n; i >= 0; i--) {\n      if(IsPrime(i) && IsPrime(i - 2)) {\n        cout << i - 2 << \" \" << i << endl;\n        break;\n      }\n    }\n  }\n  return 0;\n}\n\n"}
{"input": "translate Python to C++: import math\nm = 10000\ns = [1 for i in range(m+1)]\ns[0] = 0\nfor i in range(2, int(math.sqrt(m))+1):\n    if s[i] != 0:\n        for j in range(i*2, m, i):\n            s[j] = 0\n\nss = []\nfor i in range(m+1):\n    if s[i] == 1:\n      ss.append(i)\nss.reverse()\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        quit()\n    for i in range(len(ss)):\n        if ss[i] <= n and ss[i] - ss[i+1] == 2:\n            print(ss[i+1], ss[i])\n            break\n\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\n\nint isprime(int n)\n{\n\tfor(int i = 2; i * i <= n; i++)\n\t{\n\t\tif(n % i == 0)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 1;\n}\n\nint main()\n{\n\tint p1[10000];\n\tint q1[10000];\n\tint n, i, cnt = 0;\n\n\twhile(1)\n\t{\n\t\tscanf (\"%d\",&n);\n\t\tfor(i=n; i!=0; i--)\n\t\t{\n\t\t\tif(isprime(i) == 1 && isprime(i-2) == 1)\n\t\t\t{\n\t\t\t\tp1[cnt] = i;\n\t\t\t\tq1[cnt] = i-2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(n==0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tcnt++;\n\t}\n\tfor(i=0; i<cnt; i++)\n\t{\n\t\tprintf(\"%d %d\\n\",q1[i],p1[i]);\n\t}\n\treturn 0;\n}"}
{"input": "translate Python to C++: dplist = [(5, 3), (7, 5), (13, 11), (19, 17), (31, 29), (43, 41), (61, 59), (73, 71), (103, 101), (109, 107), (139, 137), (151, 149), (181, 179), (193, 191), (199, 197), (229, 227), (241, 239), (271, 269), (283, 281), (313, 311), (349, 347), (421, 419), (433, 431), (463, 461), (523, 521), (571, 569), (601, 599), (619, 617), (643, 641), (661, 659), (811, 809), (823, 821), (829, 827), (859, 857), (883, 881), (1021, 1019), (1033, 1031), (1051, 1049), (1063, 1061), (1093, 1091), (1153, 1151), (1231, 1229), (1279, 1277), (1291, 1289), (1303, 1301), (1321, 1319), (1429, 1427), (1453, 1451), (1483, 1481), (1489, 1487), (1609, 1607), (1621, 1619), (1669, 1667), (1699, 1697), (1723, 1721), (1789, 1787), (1873, 1871), (1879, 1877), (1933, 1931), (1951, 1949), (1999, 1997), (2029, 2027), (2083, 2081), (2089, 2087), (2113, 2111), (2131, 2129), (2143, 2141), (2239, 2237), (2269, 2267), (2311, 2309), (2341, 2339), (2383, 2381), (2551, 2549), (2593, 2591), (2659, 2657), (2689, 2687), (2713, 2711), (2731, 2729), (2791, 2789), (2803, 2801), (2971, 2969), (3001, 2999), (3121, 3119), (3169, 3167), (3253, 3251), (3259, 3257), (3301, 3299), (3331, 3329), (3361, 3359), (3373, 3371), (3391, 3389), (3463, 3461), (3469, 3467), (3529, 3527), (3541, 3539), (3559, 3557), (3583, 3581), (3673, 3671), (3769, 3767), (3823, 3821), (3853, 3851), (3919, 3917), (3931, 3929), (4003, 4001), (4021, 4019), (4051, 4049), (4093, 4091), (4129, 4127), (4159, 4157), (4219, 4217), (4231, 4229), (4243, 4241), (4261, 4259), (4273, 4271), (4339, 4337), (4423, 4421), (4483, 4481), (4519, 4517), (4549, 4547), (4639, 4637), (4651, 4649), (4723, 4721), (4789, 4787), (4801, 4799), (4933, 4931), (4969, 4967), (5011, 5009), (5023, 5021), (5101, 5099), (5233, 5231), (5281, 5279), (5419, 5417), (5443, 5441), (5479, 5477), (5503, 5501), (5521, 5519), (5641, 5639), (5653, 5651), (5659, 5657), (5743, 5741), (5851, 5849), (5869, 5867), (5881, 5879), (6091, 6089), (6133, 6131), (6199, 6197), (6271, 6269), (6301, 6299), (6361, 6359), (6451, 6449), (6553, 6551), (6571, 6569), (6661, 6659), (6691, 6689), (6703, 6701), (6763, 6761), (6781, 6779), (6793, 6791), (6829, 6827), (6871, 6869), (6949, 6947), (6961, 6959), (7129, 7127), (7213, 7211), (7309, 7307), (7333, 7331), (7351, 7349), (7459, 7457), (7489, 7487), (7549, 7547), (7561, 7559), (7591, 7589), (7759, 7757), (7879, 7877), (7951, 7949), (8011, 8009), (8089, 8087), (8221, 8219), (8233, 8231), (8293, 8291), (8389, 8387), (8431, 8429), (8539, 8537), (8599, 8597), (8629, 8627), (8821, 8819), (8839, 8837), (8863, 8861), (8971, 8969), (9001, 8999), (9013, 9011), (9043, 9041), (9241, 9239), (9283, 9281), (9343, 9341), (9421, 9419), (9433, 9431), (9439, 9437), (9463, 9461), (9631, 9629), (9679, 9677), (9721, 9719), (9769, 9767), (9859, 9857), (9931, 9929)]\n\nwhile(True):\n    N = int(input())\n    if N == 0:\n        break\n    for i in range(len(dplist)-1, -1, -1):\n        if dplist[i][0] <= N:\n            print(dplist[i][1], dplist[i][0])\n            break\n\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <vector>\n#include <iostream>\n#include <utility>\n#include <algorithm>\n#include <string>\n#include <deque>\n#include <queue>\n#include <tuple>\n#include <queue>\n#include <functional>\n#include <cmath>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <numeric>\n#include <unordered_map>\n#include <unordered_set>\n#include <complex>\n#include <iterator>\n#include <array>\n#include <memory>\n#include <stack>\n#define vi vector<int>\n#define vvi vector<vector<int> >\n#define ll long long int\n#define vl vector<ll>\n#define vvl vector<vector<ll>>\n#define vb vector<bool>\n#define vc vector<char>\n#define vs vector<string>\n#define ld long double\n#define INF 1e9\n#define EPS 0.0000000001\n#define rep(i,n) for(int i=0;i<n;i++)\n#define loop(i,s,n) for(int i=s;i<n;i++)\n#define all(in) in.begin(), in.end()\ntemplate<class T, class S> void cmin(T &a, const S &b) { if (a > b)a = b; }\ntemplate<class T, class S> void cmax(T &a, const S &b) { if (a < b)a = b; }\n#define MAX 9999999\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef pair<double,double>pdd;\ntypedef pair<ll,ll>pll;\nint main(){\n    vector<bool>IsPrime(MAX+1,true);\n    vector<int>Prime(MAX+1,0); //Primearray\n    int Primecounter =0;                  //Primearray counter;\n    for(int i = 2; i<MAX+1;i++){\n        if(IsPrime[i]){\n            for(int j = 2;i*j<MAX;j++)\n                IsPrime[i*j] = false;//?\u30c6\u3064\u30a8???\u30c6\u3064\u30fc??????Primearray???????\u30c6\u3064\u30a8??????????????????\u30c6\u3064\u30fc?????\u30c6\u3064\u30a3???false???\n            Prime[Primecounter] = i;\n            Primecounter++;\n        }\n    }\n    int n;\n    while(cin>>n,n){\n        int maxi=0;\n        for(int i=n; i>=2; i--){\n            if(IsPrime[i]&&IsPrime[i-2]){\n                cmax(maxi,i);\n                break;\n            }\n        }\n        cout<<maxi-2<<\" \"<<maxi<<endl;\n    }\n}"}
{"input": "translate Python to C++: # AOJ 0150 Twin Prime\n# Python3 2018.6.17 bal4u\n\nMAX = 10000\nSQRT = 100     # sqrt(MAX)\n\nprime = [True for i in range(MAX)]\ndef sieve():\n\tfor i in range(4, MAX, 2):\n\t\tprime[i] = False\n\tfor i in range(3, SQRT, 2):\n\t\tif prime[i] is True:\n\t\t\tfor j in range(i*i, MAX, i):\n\t\t\t\tprime[j] = False\nsieve()\nwhile True:\n\tn = int(input())\n\tif n == 0: break\n\tif (n & 1) == 0: n -= 1\n\twhile not prime[n] or not prime[n - 2]: n -= 2\n\tprint(n-2, n)\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\n\nint\tmain(){\n\tint\ti,\tk,\tx,\ta,\tb,\tdata[10000];\n\tfor(i\t=\t2;\ti\t<=\t10000;\ti++){\n\t\tdata[i]\t=\t1;\n\t}\n\tfor(i\t=\t2;\ti\t*\ti\t<=\t10000;\ti++){\n\t\tif(data[i]){\n\t\t\tfor(k\t=\t2\t*\ti;\tk\t<=\t10000;\tk\t+=\ti){\n\t\t\t\tdata[k]\t=\t0;\n\t\t\t}\n\t\t}\n\t}\n\twhile(1){\n\t\ta\t=\t0;\n\t\tb\t=\t0;\n\t\tscanf(\"%d\",\t&x);\n\t\tif(x\t==\t0)break;\n\t\tfor(x;\tx\t>=\t2;\tx--){\n\t\t\tif(data[x]\t==\t1){\n\t\t\t\tb\t=\ta;\n\t\t\t\ta\t=\tx;\n\t\t\t}\n\t\t\tif(b\t-\ta\t==\t2)break;\n\t\t}\n\t\tprintf(\"%d %d\\n\",\ta,\tb);\n\t}\n\treturn\t0;\n}"}
{"input": "translate Python to C++: import bisect as bs\ndef prime(m):\n  N = range(1,m+1, 2)\n  N[0] = 2\n  for i in range(1, int(m**.5)+1):\n    x = N[i]\n    if x: N[i+x::x] = [0] * len(N[i+x::x])\n  return filter(None, N)\n\nP = prime(10000)\nx = [P[i] for i in range(1,len(P)) if P[i] - P[i-1]==2]\nwhile 1:\n  n = input()\n  if n==0: break\n  a = x[bs.bisect_right(x, n)-1]\n  print a-2, a\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <map>\n#include <set>\n#include <bitset>\n#include <numeric>\n#include <utility>\n#include <iomanip>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vint;\ntypedef vector<long long> vll;\ntypedef pair<int,int> pint;\ntypedef pair<long long, long long> pll;\n\n#define MP make_pair\n#define PB push_back\n#define ALL(s) (s).begin(),(s).end()\n#define EACH(i, s) for (__typeof__((s).begin()) i = (s).begin(); i != (s).end(); ++i)\n#define COUT(x) cout << #x << \" = \" << (x) << \" (L\" << __LINE__ << \")\" << endl\n\ntemplate<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }\ntemplate<class T1, class T2> ostream& operator << (ostream &s, pair<T1,T2> P) \n{ return s << '<' << P.first << \", \" << P.second << '>'; }\ntemplate<class T> ostream& operator << (ostream &s, vector<T> P) \n{ for (int i = 0; i < P.size(); ++i) { if (i > 0) { s << \" \"; } s << P[i]; } return s; }\ntemplate<class T> ostream& operator << (ostream &s, vector<vector<T> > P) \n{ for (int i = 0; i < P.size(); ++i) { s << endl << P[i]; } return s << endl; }\ntemplate<class T1, class T2> ostream& operator << (ostream &s, map<T1,T2> P) \n{ EACH(it, P) { s << \"<\" << it->first << \"->\" << it->second << \"> \"; } return s; }\n\n\nconst int MAX = 10001000;\nbool IsPrime[MAX];\nbool IsDPrime[MAX];\nvector<int> Era(int n = MAX) {\n    vector<int> res;\n\tIsPrime[0] = false; IsPrime[1] = false; \n\tfor (int i = 2; i < n; ++i) IsPrime[i] = true;\n\tfor (int i = 2; i < n; ++i) {\n\t\tif (IsPrime[i]) {\n            res.push_back(i);\n\t\t\tfor (int j = i*2; j < n; j += i) IsPrime[j] = false;\n\t\t}\n\t}\n    return res;\n}\n\nint main() {\n    Era();\n    memset(IsDPrime, 0, sizeof(IsDPrime));\n    for (int i = 2; i <= 10000; ++i) if (IsPrime[i] && IsPrime[i+2]) IsDPrime[i] = true;\n    \n    int n;\n    while (cin >> n) {\n        if (n == 0) break;\n        int res = n-1;\n        for (res = n-2; res >= 3; --res) if (IsDPrime[res]) {\n            cout << res << \" \" << res+2 << endl;\n            break;\n        }\n    }\n    return 0;\n}\n"}
{"input": "translate Python to C++: r = 10001\nsqrt = int(r**0.5)\np = [1]*r\np[0] = 0\nfor i in range(1,sqrt):\n\tif p[i]:\n\t\tp[2*i+1::i+1] = [0 for x in range(2*i+1,r,i+1)]\n\nwhile True:\n\tn = int(raw_input())\n\tif n == 0: break\n\tfor i in range(n,1,-1):\n\t\tif p[i-1] and p[i-3]:\n\t\t\tprint i-2,i\n\t\t\tbreak\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\nint main(){\n\tint i,j,a,b,n,p1,q1;\n\tint isprime[1000];\n\tfor(i=0;i<=1000;i++){\n \t\tisprime[i]=1;\n\t}\n\tisprime[0]=isprime[1]=0;\n\tfor(i=2;i<=1000;i++){\n \t\tif(isprime[i]==1){\n \t\t\tfor(j=2*i;j<=1000;j+=i){\n\t\t\t\tisprime[j]=0;\n\t\t\t}\n\t\t}\n\t}\n\n\tscanf(\"%d\", &n);\n\twhile (n != 0){\n\t\tfor(i=2;i<=n;i++){\n\t\t\ta = isprime[i-2];\n\t\t\tb = isprime[i];\n\t\t\tif(a==1 && b==1){\n\t\t\t\tq1 = i-2;\n\t\t\t\tp1 = i;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\",q1,p1);\n\t\tscanf(\"%d\", &n);\n\t}\n\treturn 0;\n }"}
{"input": "translate Python to C++: r = 10001\nsqrt = int(r**0.5)\np = [1]*r\ntwin = [0]*r\np[0] = 0\np[1::2] = [0 for x in range(1,r,2)]\nfor i in range(2,r,2):\n\tif p[i]:\n\t\tp[2*i+1::i+1] = [0 for x in range(2*i+1,r,i+1)]\n\t\tif p[i-2]:\n\t\t\ttwin[i] = 1\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <bits/stdc++.h>\nusing namespace std;\n\nvector<int> prime;\nvector<int> ls;\n\nvoid sieve(int N){\n    prime.resize(N+1,1);\n    prime[0] = prime[1] = 0;\n    for(int i=2;i*i<=N;i++){\n        for(int j=i*i;j<=N;j+=i){\n            prime[j] = 0;\n        }\n    }\n    for(int i=2;i<=N;i++){\n        if(prime[i])ls.push_back(i);\n    }\n}\n\nint main() {\n    sieve(int(1e5));\n    int n;\n    while(cin >> n, n){\n        int p, q;\n        for(int i=0;ls[i]<=n-2;i++){\n            if(ls[i+1]-ls[i]==2){\n                p = ls[i];\n                q = ls[i+1];\n            }\n        }\n        cout << p << \" \" << q << endl;\n    }\n    return 0;\n}\n"}
{"input": "translate Python to C++: r = 10001\nsqrt = int(r**0.5)\np = [1]*r\ntwin = [0]*r\np[0] = 0\np[1::2] = [0 for x in range(1,r,2)]\nfor i in range(2,r,2):\n\tif p[i]:\n\t\tp[2*i+1::i+1] = [0 for x in range(2*i+1,r,i+1)]\n\t\tif p[i-2]:\n\t\t\ttwin[i:i+250] = [i+1 for x in range(i,i+250)]\n\t\t\nwhile True:\n\tn = int(raw_input())\n\tif n == 0: break\n\tprint twin[n-1]-2,twin[n-1]\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\nconst int MAX_V = 1000;\nint prime[MAX_V+1];\nint main(){\n  int i,k,v,n,j,i1 = 0,i2 = 0,max = 0,p1,q1;\n  for(i = 2;i <= MAX_V;i++){\n    prime[i] = 1;\n  }\n  for(i = 2;i*i <= MAX_V;i++){\n    if(prime[i]){\n      for(k = 2 * i;k <= MAX_V;k += i){\n        prime[k] = 0;\n      }\n    }\n  }\n  while(1){\n    scanf(\"%d\",&n);\n    if(n == 0){\n      break;\n    }\n    for(j = 0;j + 2 < n;j++){\n      int isprime = prime[j];\n      int isprime2 = prime[j + 2];\n      if(isprime) i1 = 1;else i1 = 0;\n      if(isprime2) i2 = 1;else i2 = 0;\n      if(i1 == 1 && i2 == 1){\n        max = j;\n      }\n    }\n    p1 = max;\n    q1 = max + 2;\n    printf(\"%d%d\\n\",p1,q1);\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: def prime(N):\n    first=[True for i in range(N+1)]\n    first[0],first[1]=False,False\n    for i in range(2,int((N+1)**0.5)):\n        if not first[i]:continue\n        for j in range(i*2,N+1,i):first[j]=False\n    return [i for i in range(N+1) if first[i]]\n\nprime_number=prime(10000)\nwhile 1:\n    n=int(input())\n    if n==0:break\n    box=0\n    for i,j in enumerate(prime_number):\n        if j>n:break\n        if prime_number[i]-prime_number[i-1]==2:\n            box=max(box,prime_number[i])\n    print(box-2,box)\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <cmath>\nusing namespace std;\n\nbool check(int p1) {\n\tfor (int j = 2; j <= sqrt(p1); j++) {\n\t\tif (p1 % j == 0)\n\t\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\nint main()\n{\t\n\tint n;\n\n\tcin >> n;\n\n\twhile (n > 0) {\n\t\tint p = n;\n\n\t\twhile (p > 3 && (!check(p) || !check(p - 2)))\n\t\t\tp--;\n\n\t\tcout << p - 2 << \" \" << p << endl;\n\n\t\tcin >> n;\n\t}\n\n\treturn 0;\n}\n\n"}
{"input": "translate Python to C++: import bisect as bs\ndef prime(m):\n  N = range(1,m+1, 2)\n  N[0] = 2\n  for i in range(1, len(N)):\n    x = N[i]\n    if x: N[i+x::x] = [0]*len(N[i+x::x])\n  return filter(None, N)\n \nP = prime(10000)\nx = []\na = P[0]\nx = [a for a,b in zip(P[1:],P[:-1]) if a-b==2]\nwhile 1:\n  n = int(raw_input())\n  if n==0: break\n  a = x[bs.bisect_right(x, n)-1]\n  print a-2, a\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nint main(){\n  bool p[10001];\n  memset(p, 1, sizeof(p));\n  p[1] = p[0] = 0;\n  for(int i = 0 ; i < 10001 ; i++){\n    if(p[i]){\n      for(int j = 2 * i ; j < 10001 ; j += i){\n\tp[j] = 0;\n      }\n    }\n  }\n\n  int n;\n  while(cin >> n, n){\n    for(int i = n ; ; i--){\n      if(p[i] == 1 && p[i-2] == 1){\n\tcout << i-2 << ' ' << i << endl;\n\tbreak;\n      }\n    }\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: from itertools import takewhile\npnum, tmp = [], [i for i in range(2, 10000)]\nwhile tmp[0] < 101:\n    v = tmp.pop(0)\n    pnum.append(v)\n    tmp = list(filter(lambda x: x%v!=0, tmp))\nfor t in tmp: pnum.append(t)\ndel pnum[0:2]\nwhile True:\n    n = int(input())\n    if n==0: break\n    prime = list(takewhile(lambda x: x<n, pnum))\n    for i in range(len(prime))[:0:-1]:\n        if prime[i]-prime[i-1]==2:\n            print(prime[i-1], prime[i])\n            break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <math.h>\nusing namespace std;\nbool check(int x,int y){\n        for(int i=2 ; i<=sqrt(x) ; i++ ){\n                if(x%i==0)\n                        return false;\n                if(y%i==0)\n                        return false;\n        }\n        return true;\n}\nint main(){\n        int n;\n        while(true){\n                cin >> n;\n                if(n==0)break;\n                if(n<=6)\n                        cout<<5<<\" \"<<3<<endl;\n                int de=(n/6);\n                for(int x=6*de ; x>0 ; x=de*6 ){\n                        if(check(x+1,x-1) && x<n ){\n                                cout << x-1 <<\" \" << x+1 << endl;\n                                break;\n                        }\n                        de--;\n                }\n        }\n        return 0;\n}\n"}
{"input": "translate Python to C++: r = 10001\nsqrt = int(r**0.5)\np = [1]*r\ntwin = [0]*r\np[0] = 0\np[1::2] = [0 for x in range(1,r,2)]\nfor i in range(2,r,2):\n\tif p[i]:\n\t\tp[2*i+1::i+1] = [0 for x in range(2*i+1,r,i+1)]\n\t\tif p[i-2]:\n\t\t\ttwin[i] = 1\n\t\t\nwhile True:\n\tn = int(raw_input())\n\tif n == 0: break\n\ti = n - twin[:n][::-1].index(1)\n\tprint i-2,i\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\nint isprime(int n){\n  for(int i=2;i*i<=n;i++){\n    if(n%i==0)return 0;\n  }\n  return 1;\n}\nint main(){\n  int k,n;\n  while(1){\n    scanf(\"%d\",&n);\n    if(n==0)break;\n    for(k=n-2;k>=2;k--){\n      if(isprime(k)&&isprime(k+2)){\n        printf(\"%d %d\\n\",k,k+2);\n      }\n    }\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: def prime(m):\n  N = range(1,m+2, 2)\n  r = int(m**.5)\n  h = len(N)\n  N[0] = 0\n  for i in range(h):\n    x = N[i]\n    if x>r: break\n    if x and i+x<h: N[i+x:h:x]=[0] * ((h-1-i-x)/x+1)\n  N[0] = 2\n  return filter(None, N)\n\nP = prime(10000)\nx = [a for a,b in zip(P[1:],P[:-2]) if a-b==2]\nwhile 1:\n  n = input()\n  if n==0: break\n  for e in x:\n    if e>n: break\n    a = e\n  print a-2,a\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\nint i,j,n,P[10001];int main(){for(i=2;i*i<10001;i++)for(j=i*2;j<10001;j+=i)P[j]=1;for(;std::cin>>n,n;printf(\"%d %d\\n\",i-2,i))for(i=n&1?n:n-1;i>4&&(P[i]||P[i-2]);i-=2);return 0;}"}
{"input": "translate Python to C++: from bisect import bisect_left\nMAXN = 10000\nP = [True]*MAXN\nP[0] = P[1] = False\nfor i in xrange(int(MAXN**0.5)+1):\n    if P[i]:\n        for j in xrange(i+i,MAXN,i):\n            P[j] = False\nTP = filter(lambda i:P[i] and P[i-2], xrange(2,MAXN))\nwhile True:\n    n = int(raw_input())\n    if n == 0:\n        break\n    m = TP[bisect_left(TP,n)-1]\n    print m-2, m\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\nconst int MAX_X = 10000;\nint prime[10000];\n\nint main(){\n\n\tint i, k, n;\n\n\tint border[10];\n\tfor( i = 2; i <= MAX_X; i++) {\n\t\tprime[i] = 1;\n\t}\n\n\tfor(i = 2; i*i <= MAX_X; i++){\n\t\tif(prime[i]) {\n\t\t\tfor(k = 2 * i; k <= MAX_X; k += i){\n\t\t\t\tprime[k] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\twhile(1){\n\t\tscanf(\"%d\", &n);\n\t\tif( n == 0) break;\n\t\tint max;\n\t\tfor( i = n; i >= 2; i--){\n\t\t\tif( prime[i]){\n\t\t\t\tif( prime[i - 2]){\n\t\t\t\t\tmax = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\", max -2, max);\n\t}\n\treturn 0;\n}"}
{"input": "translate Python to C++: while True:\n    N = input()\n    if N == 0: break\n    L = ['' for i in range(N-1)]\n    L.insert(0, '*')\n    for i, v in enumerate(L):\n        n = i+1\n        if v == '':\n            for i in range(n*2-1, len(L), n):\n                L[i] = '*'\n    prime = []\n    for i, v in enumerate(L):\n        if v == '':\n            prime.append(i+1)\n    prime.reverse()\n    for i in range(len(prime)):\n        if prime[i]-prime[i+1] == 2:\n            print prime[i+1], prime[i]\n            break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <vector>\n#include <iostream>\n#include <utility>\n#include <algorithm>\n#include <string>\n#include <deque>\n#include <queue>\n#include <tuple>\n#include <queue>\n#include <functional>\n#include <cmath>\n#include <iomanip>\n#include <map>\n#include <set>\n#include <numeric>\n#include <unordered_map>\n#include <unordered_set>\n#include <complex>\n#include <iterator>\n#include <array>\n#include <memory>\n#include <stack>\n#define vi vector<int>\n#define vvi vector<vector<int> >\n#define ll long long int\n#define vl vector<ll>\n#define vvl vector<vector<ll>>\n#define vb vector<bool>\n#define vc vector<char>\n#define vs vector<string>\n#define ld long double\n#define INF 1e9\n#define EPS 0.0000000001\n#define rep(i,n) for(int i=0;i<n;i++)\n#define loop(i,s,n) for(int i=s;i<n;i++)\n#define all(in) in.begin(), in.end()\ntemplate<class T, class S> void cmin(T &a, const S &b) { if (a > b)a = b; }\ntemplate<class T, class S> void cmax(T &a, const S &b) { if (a < b)a = b; }\n#define MAX 9999999\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef pair<double,double>pdd;\ntypedef pair<ll,ll>pll;\nint main(){\n    vector<bool>IsPrime(MAX+1,true);\n    vector<int>Prime(MAX+1,0); //Primearray\n    int Primecounter =0;                  //Primearray counter;\n    for(int i = 2; i<MAX+1;i++){\n        if(IsPrime[i]){\n            for(int j = 2;i*j<MAX;j++)\n                IsPrime[i*j] = false;//?\u00b4???\u00b0??????Primearray???????\u00b4??????????????????\u00b0?????\u00a8???false???\n            Prime[Primecounter] = i;\n            Primecounter++;\n        }\n    }\n    int n;\n    while(cin>>n,n){\n        int maxi=0;\n        for(int i=n; i>=2; i--){\n            if(IsPrime[i]&&IsPrime[i-2]){\n                cmax(maxi,i);\n                break;\n            }\n        }\n        cout<<maxi-2<<\" \"<<maxi<<endl;\n    }\n}"}
{"input": "translate Python to C++: # -*- coding: utf-8 -*-\n\"\"\"\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom bisect import bisect_left\ninput = stdin.readline\n\n\ndef create_prime_list(limit):\n    \"\"\" ??\u00a8??????????????????????????\u00a7limit?????\u00a7????\u00b4???\u00b0?????????????\u00b1???????\n    https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9\n    \"\"\"\n    x = limit**0.5\n    primes = []\n    nums = [x for x in range(2, limit+1)]\n    while nums[0]<=x:\n        primes.append(nums[0])\n        current_prime = nums[0]\n        nums = [x for x in nums if x%current_prime != 0]\n    primes.extend(nums)\n    return primes\n\n\ndef main(args):\n    # ??????????\u00b4???\u00b0?????????\n    primes = create_prime_list(10000)\n    twin_primes = []\n    prev = primes[0]\n    for p in primes[1:]:\n        if p == prev + 2:\n            twin_primes.append([prev, p])\n        prev = p\n\n    keys = [x[1] for x in twin_primes]\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        r = bisect_left(keys, n)\n        print(*twin_primes[r-1])\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    \nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include \"stdio.h\"\n//#include \"time.h\"\n//?????\u00a7??????????\u00b4???\u00b0?????????????????????\n// 5<= n <= 10000\n//p1=?\u00b0????????\u00b4???\u00b0p2=??\u00a7???????\u00b4???\u00b0\n\nint isprime(int n) {\n int i;  \nfor(i = 2; i < n; i++) {   //??????????\u00a7????????????\u00a8??\u00a7??\u00b6??\u00b0??\u00a7??????????\u00b4???\u00b0??\u00a8??????\n        if(n % i == 0)return 0;    //????????????????????\u00a7?\u00b4???\u00b0??\u00a7?????????\n    }\n    return 1;\n}\n\n\nint main(){\n    int i,n,p1,q1;\n    //    clock_t start, now;//??\u00a3?\u00a8?\n    while(1){\n        scanf(\"%d\",&n);\n        //        start = clock(); // ????\u00a7???????\n        if(n == 0)break;\n        for(i = n;3 <= i;i--){\n            if (isprime(i) == 1 && isprime(i - 2) == 1) break;\n        }\n        p1 = i-2;\n        q1 = i;\n        //        now = clock(); // ????????????\n        //        printf(\"%f\\n\", (double)(now - start) / CLOCKS_PER_SEC);//??\u00ac???\n        printf(\"%d %d\\n\",p1,q1);\n    }\n}"}
{"input": "translate Python to C++: import math\nN=10000\nprime=[1]*(N+1)\nprime[0],prime[1]=0,0\nfor i in range(2,int(math.sqrt(N))):\n    if prime[i]==1:\n        j=i\n        while i*j<=N:\n            prime[i*j]=0\n            j+=1\n\nwhile True:\n    n=input()\n    if n==0:break\n    for i in range(n,2,-1):\n        if prime[i]==prime[i-2]==1:\n            print i-2,i\n            break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<functional>\nusing namespace std;\nint main(void)\n{\n\tint i,j,n,max,mx;\n\tint flg[10001];\n\twhile(1) {\n\t\tscanf(\"%d\",&n);\n\t\tif(n==0) break;\n\t\tfor(i=2;i<=n;i++) flg[i]=1;\n\t\tfor(i=2;i*i<=n;i++) {\n\t\t\tif(flg[i]==1) for(j=2;j*i<n;j++) flg[i*j]=0;\n\t\t}\n\t\tmax=-1;\n\t\tfor(i=2;i<n;i++) {\n\t\t\tif(flg[i]==1 && flg[i]==flg[i+2] && i+2<=n) {\n\t\t\t\tif(max<i) max=i;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\",max,max+2);\n\t}\n\treturn 0;\n}\n\t\t"}
{"input": "translate Python to C++: import bisect as bs\ndef prime(m):\n  N = range(1,m+1, 2)\n  N[0] = 2\n  for i in range(1, int(m**.5)+1):\n    x = N[i]\n    if x: N[i+x::x] = [0] * len(N[i+x::x])\n  return filter(None, N)\n\nP = prime(10000)\nx = [P[i] for i in range(1,len(P)) if P[i] - P[i-1]==2]\nwhile 1:\n  n = input()\n  if n==0: break\n  i = bs.bisect_right(x, n)-1\n  print x[i-1], x[i]\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\n\nint main() {\n  int MAX_V = 1000000;\n  int prime[MAX_V+1];\n  int i, k, v;\n  for(i = 2; i <= MAX_V; i++) {\n      prime[i] = 1;\n    }\n      for(i = 2; i*i <= MAX_V; i++) {\n        if(prime[i]) {\n          for(k = 2 * i; k <= MAX_V; k += i) {\n            prime[k] = 0;\n          }\n        }\n      }\n  while(scanf(\"%d\", &v) != EOF) {\n  int s = 0;\n  for(int i = 5;i <= v;i++){\n    int isprime = prime[i];\n    if(isprime){\n      s++;\n    }\n  }\n  int side[s],d = 0;\n  for(int i = 5;i <= v;i++){\n    int isprime = prime[i];\n      if(isprime) {\n        side[d] = i;\n        d++;\n      }\n    }\n  int m = d-1;\n  int dai = 0,syo = 0;\n  for(int n = m;n >= 0;n--){\n    if(side[n] - side[n-1] == 2){\n      if(syo < side[n-1]){\n        syo = side[n-1];\n        dai = side[n];\n      }\n    }\n  }\n  printf(\"%d %d\\n\",syo,dai);\n}\n  return 0;\n}"}
{"input": "translate Python to C++: import math\n\n\ndef prime(n):\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n    else:\n        return True\n\n\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n\n    if n % 2 == 0:\n        n -= 1\n\n    for i in range(n, 3, -2):\n        if prime(i) and prime(i-2):\n            print(i-2, i)\n            break\n\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    bool prime[10005];\n    memset(prime,0,sizeof(prime));\n    for(int i=2;i<sqrt(10005);i++){\n        if(!prime[i])for(int j=i*2;j<10005;j+=i)prime[j]=1;\n    }\n    int num[210],co=0;\n    for(int i=3;i<10001;i++){\n        if(!prime[i]&&!prime[i+2]){\n            num[co]=i;\n            co++;\n        }\n    }\n    int n;\n    while(cin>>n,n){\n        if(num[co-1]<n)cout<<num[co-1]<<\" \"<<num[co-1]+2<<endl;\n        else{\n            for(int i=0;i<co;i++){\n                if(num[i]>=n&&num[i-1]+2<=n){\n                    cout<<num[i-1]<<\" \"<<num[i-1]+2<<endl;\n                    break;\n                }\n                else if(num[i]>n){\n                    cout<<num[i-2]<<\" \"<<num[i-2]+2<<endl;\n                    break;\n                }\n            }\n        }\n    }\n}"}
{"input": "translate Python to C++: import bisect as bs\ndef prime(m):\n  N = range(1,m+1, 2)\n  N[0] = 2\n  n = len(N)\n  for i in range(1, n):\n    x = N[i]\n    if x: N[i+x::x] = [0]*len(N[i+x::x])\n  return filter(None, N)\n\nP = prime(10000)\nx = []\na = P[0]\nfor b in P[1:]:\n  if b-a==2: x.append(b)\n  a=b\nwhile 1:\n  n = int(raw_input())\n  if n==0: break\n  a = x[bs.bisect_right(x, n)-1]\n  print a-2, a\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\nint isprime(int n){\n  for(int i=2;i*i<=n;i++){\n    if(n%i==0)return 0;\n  }\n  return 1;\n}\nint main(){\n  int k,n,p,q;\n  while(1){\n    scanf(\"%d\",&n);\n    if(n==0)break;\n    for(k=2;k<=n-2;k++){\n      if(isprime(k)*isprime(k+2)){\n        p=k;\n        q=k+2;\n      }\n    }\n    printf(\"%d %d\\n\",p,q);\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: r = 10001\nsqrt = int(r**0.5)\np = [1]*r\ntwin = [0]*r\np[0] = 0\np[1::2] = [0 for x in range(1,r,2)]\nfor i in range(2,r,2):\n\tif p[i]:\n\t\tp[2*i+1::i+1] = [0 for x in range(2*i+1,r,i+1)]\n\t\tif p[i-2]:\n\t\t\ttwin[i:i+250] = [i+1 for x in range(i,i+250)]\n\t\t\nwhile True:\n\tn = int(raw_input())\n\tif n == 0: break\n\tprint twin[n-1]-2,twin[n-1]\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\nusing namespace std;\nbool t[10000] = {false};\nint main()\n{\n\tint n, i, j;\n\tt[0] = true;\n\tfor (i = 2; i * i <= 10000; i++)\n\t{\n\t\tif (!t[i-1])\n\t\t{\n\t\t\tfor (j = i+i; j <= 10000; j+=i)\n\t\t\t\tt[j-1] = true;\n\t\t}\n\t}\n\twhile (cin >> n, n)\n\t{\n\t\tfor (i = n; i >= 5; i--)\n\t\t{\n\t\t\tif ((!t[i-1]) && (!t[i-3]))\n\t\t\t{\n\t\t\t\tcout << i-2 << \" \" << i << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}"}
{"input": "translate Python to C++: primes = [0, 0] + [1]*9999\nfor i in range(2, 100):\n    for j in range(i*i, 10001, i):\n        primes[j] = 0\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    for i in range(2, n+1)[::-1]:\n        if primes[i-2] and primes[i]:\n            print(i-2, i)\n            break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\n\nint isprime(int n) {\n for(int i = 2; i * i <= n; i++) {\n\t if(n % i == 0) return 0;\n }\n return 1;\n}\n\nint main(){\n\tint n,i,min,max;\n\tint number[10000+2] = {0};\n\tfor(i = 2;i < 10000;i++){\n\t\tnumber[i] = isprime(i);\n\t}\n\twhile(scanf(\"%d\",&n)){\n\t\tif(n == 0)break;\n\t\tmax = 0; min = 0;\n\t\tfor(i = n;i > 0;i--){\n\t\t\t//printf(\"%d  \",i);\n\t\t\tif(number[i] && number[i-2]){\n\t\t\t\tmin = i-2;\n\t\t\t\tmax = i;\n\t\t\t\t//printf(\"%d %d\\n\",i,i-2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\",min,max);\n\t}\n\treturn 0;\n}"}
{"input": "translate Python to C++: def get_input():\n    while True:\n        try:\n            yield ''.join(input())\n        except EOFError:\n            break\n\nMAX = 10001\nprimes = list()\nfor i in range(MAX):\n    primes.append(True)\nprimes[0] = False\nprimes[1] = False\n\ntprimes = [False for i in range(MAX)]\n\nfor i in range(2, MAX):\n    j = i + i\n    while j < MAX:\n        primes[j] = False\n        j = j + i\n\nfor i in range(2, MAX):\n    if primes[i] and primes[i-2]:\n        tprimes[i] = True\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n\n    for i in range(n, -1, -1):\n        if tprimes[i]:\n            print(i-2, i)\n            break\n\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nbool isPrime(int n){\n  for(int i=2;i<=sqrt((double)n);i++){\n    if(n%i == 0)return false;\n  }\n  return true;\n}\n\nint main(){\n  int n,q;\n  while(true){\n    cin >> n;\n    if(n == 0)break;\n    q=n;\n    for(int i=n-1;i>=1;i--){\n      if(isPrime(i)){\n\tif(q-i == 2){\n\t  cout << i << \" \" << q << endl;\n\t  break;\n\t}\n\tq=i; \n      }\n    }\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: def isPrime(n):\n    for i in range(2,int(n**.5+1)):\n        if n%i==0:\n            return False\n    return True\nwhile 1:\n    n=int(input())\n    if not n:break\n    for i in range(n,1,-1):\n        if isPrime(i) and isPrime(i-2):\n            print(i-2,i)\n            break\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\n\nint isprime(int n){\n\tfor(int i = 2; i * i <= n; i++){\n\t\tif( n % i == 0) return 0;\n\t}\n\treturn 1;\n}\n\nint main(){\n\tint n, i;\n\twhile(1){\n\t\tscanf(\"%d\", &n);\n\t\tif( n == 0) break;\n\t\tint max = 0;\n\t\tfor( i = n; i >=2; i--){\n\t\t\tif( isprime(i)){\n\t\t\t\tif(isprime( i - 2)){\n\t\t\t\t\tmax = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\", max - 2, max);\n\t}\n\treturn 0;\n}"}
{"input": "translate Python to C++: from bisect import bisect\nMAXN = 10000\nP = [True]*MAXN\nP[0] = P[1] = False\nfor i in xrange(int(MAXN**0.5)+1):\n    if P[i]:\n        for j in xrange(i+i,MAXN,i):\n            P[j] = False\nTP = filter(lambda i:P[i] and P[i-2], xrange(2,MAXN))\nwhile True:\n    n = int(raw_input())\n    if n == 0:\n        break\n    m = TP[bisect(TP,n)-1]\n    print m-2, m\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nbool data[10010];\n\nint main(){\n\tcin.tie(0);\n\tios::sync_with_stdio(false);\n\n\tint n;\n\twhile(cin >> n && n != 0){\n\t\tfill(data, data + n + 1, true);\n\n\t\tdata[1] = false;\n\t\tdata[0] = false;\n\t\tfor(int i = 2; i <= n; ++i){\n\t\t\tfor(int j = 2; i * j <= n; ++j){\n\t\t\t\tdata[i * j] = false;\n\t\t\t}\n\t\t}\n\n\t\tfor(int i = n; i >= 2; --i){\n\t\t\tif(data[i] && data[i - 2]){\n\t\t\t\tcout << i - 2 << \" \" << i << endl;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}"}
{"input": "translate Python to C++: r = 10001\nsqrt = int(r**0.5)\np = [1]*r\ntwin = [0]*r\np[0] = 0\np[1::2] = [0 for x in range(1,r,2)]\nfor i in range(2,r,2):\n\tif p[i]:\n\t\tp[2*i+1::i+1] = [0 for x in range(2*i+1,r,i+1)]\n\t\tif p[i-2]:\n\t\t\ttwin[i:i+200] = [i+1 for x in range(i,i+200)]\n\t\t\nwhile True:\n\tn = int(raw_input())\n\tif n == 0: break\n\tprint twin[n-1]-2,twin[n-1]\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <vector>\n\nconstexpr bool divisible(const std::size_t n, const std::size_t m)\n{\n\treturn (0 == n % m);\n}\n\nconstexpr bool help_prime(const std::size_t n, const std::size_t m)\n{\n\treturn (m * m <= n) ?\n        !divisible(n, m) && help_prime(n, m + 1) :\n        true;\n}\n\nconstexpr bool prime(const std::size_t n)\n{\n\treturn (n <= 1) ?\n        false :\n        help_prime(n, 2);\n}\n\nconstexpr std::pair<std::size_t, std::size_t> find_twin_prime(const std::size_t limit, const bool next_skip = false)\n{\n    return prime(limit) ?\n        prime(limit - 2) ?\n        std::make_pair(limit - 2, limit) :\n        find_twin_prime(limit - (next_skip ? 3 : 1), true) :\n        find_twin_prime(limit - (next_skip ? 2 : 1), false);\n}\n\nint main()\n{\n    std::vector<std::size_t> ns;\n    std::size_t n;\n    \n    while(std::cin >> n, n != 0)\n    {\n        ns.push_back(n);\n    }\n\n    for(const auto a : ns)\n    {\n        const auto&& t = find_twin_prime(a);\n        std::cout << t.first << \" \" << t.second << std::endl;\n    }\n}"}
{"input": "translate Python to C++: M = 10**4+1\np = [1]*M; a = [0,0]; prm = 0\np[0],p[1] = 0,0\nfor i in xrange(2,M):\n    if p[i]:\n        if p[i-2]: prm = i\n        for j in xrange(i*i,M,i):\n            p[j] = 0\n    a.append(prm)\nwhile 1:\n    n = input()\n    if n==0: break\n    print a[n]-2,a[n]\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#define _CRT_SECURE_NO_WARNINGS\n#define _USE_MATH_DEFINES\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <array>\n#include <queue>\n#include <deque>\n#include <set>\n#include <list>\n#include <map>\n#include <stack>\n#include <utility>\n#include <bitset>\n#include <complex>\n#include <algorithm>\n#include <numeric>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <cstring>\n#include <climits>\n#include <random>\n#include <functional>\n#include <sstream>\n#include <iomanip>\n\nusing namespace std;\n\n#define rep(i, n) for(int i=0; i<(n); i++)\n#define FOR(i, m, n) for(int i=(m);i<(n);i++)\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(),(x).end()\n#define SORT(x) sort((x).begin(),(x).end())\n#define REVE(x) reverse((x).begin(),(x).end())\n#define mp make_pair\n#define pb push_back\n#define Cout(x) cout << (x) << endl\n#define Cout2(x, y) cout << (x) << \" \" << (y) << endl\n#define dump(x) cout << #x << \" = \" << (x) << endl;\n#define forauto(i, a) for(auto i : a)cout << i << \" \"; puts(\"\");\n\ntypedef long long LL;\ntypedef vector<int> VI;\ntypedef vector<LL> VL;\ntypedef vector<string> VS;\ntypedef vector<bool> VB;\ntypedef vector<vector<int>> VVI;\ntypedef pair<int, int> PII;\ntypedef pair<double, double> PDD;\ntypedef complex<double> CD;\n\n//\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\nconst int N = 11000;\nvector<bool> p(N, true);\nvoid Eratosthenes() {\n\tp[0] = false;\n\tp[1] = false;\n\trep(i, N)if (p[i])for (int j = i * 2; j < N; j += i)p[j] = false;\n}\n\nint main() {\n\tEratosthenes();\n\tint n;\n\twhile (cin >> n) {\n\t\tif (n == 0)break;\n\n\t\tint ans1, ans2;\n\t\tfor (int i = n; i >= 1; i--) {\n\t\t\tif (p[i] && p[i - 2]) {\n\t\t\t\tans1 = i - 2; ans2 = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tCout2(ans1, ans2);\n\t}\n}\n"}
{"input": "translate Python to C++: # AOJ 0150 Twin Prime\n# Python3 2018.6.17 bal4u\n\nMAX = 10001\nSQRT = 100     # sqrt(MAX)\n\nprime = [True]*MAX\ndef sieve():\n#\tfor i in range(4, MAX, 2):\n#\t\tprime[i] = False\n\tfor i in range(3, SQRT, 2):\n\t\tif prime[i] is True:\n\t\t\tfor j in range(i*i, MAX, i):\n\t\t\t\tprime[j] = False\nsieve()\ntbl, ans = [0]*MAX, 0\nfor i in range(5, MAX, 2):\n\tif prime[i] and prime[i-2]: ans = i\n\ttbl[i] = ans\n\t\nwhile True:\n\tn = int(input())\n\tif n == 0: break\n\tif (n & 1) == 0: n -= 1\n\tprint(tbl[n]-2, tbl[n])\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\n\nint isprime(int n) {\n for(int i = 2; i * i <= n; i++) {\n\t if(n % i == 0) return 0;\n }\n return 1;\n}\n\nint main(){\n\tint n,i,min,max;\n\tint number[10000+2] = {0};\n\tfor(i = 2;i < 10000;i++){\n\t\tnumber[i] = isprime(i);\n\t}\n\twhile(scanf(\"%d\",&n)){\n\t\tif(n == 0)break;\n\t\tmax = 0; min = 0;\n\t\tfor(i = n;i > 0;i--){\n\t\t\t//printf(\"%d  \",i);\n\t\t\tif(number[i] && number[i-2]){\n\t\t\t\tmin = i;\n\t\t\t\tmax = i-2;\n\t\t\t\t//printf(\"%d %d\\n\",i,i-2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d %d\\n\",min,max);\n\t}\n\treturn 0;\n}"}
{"input": "translate Python to C++: # Aizu Problem 00150: Twin Prime\n#\nimport sys, math, os, bisect\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef primes2(n):\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\n    n, correction = n-n%6+6, 2-(n%6>1)\n    sieve = [True] * (n//3)\n    for i in range(1,int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      k*k//3      ::2*k] = [False] * ((n//6-k*k//6-1)//k+1)\n        sieve[k*(k-2*(i&1)+4)//3::2*k] = [False] * ((n//6-k*(k-2*(i&1)+4)//6-1)//k+1)\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\n\nprimes = primes2(10050)\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    idx = bisect.bisect_left(primes, n)\n    while True:\n        #if idx == len(primes):\n        #    idx -= 1\n        if primes[idx] > n:\n            idx -= 1\n        if primes[idx] - primes[idx - 1] == 2:\n            print(primes[idx - 1], primes[idx])\n            break\n        idx -= 1\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "\n\n#include <bits/stdc++.h>\nusing namespace std;\n\n// pp basics\n\n#define in ,\n#define esc_paren(...) __VA_ARGS__\n#define pp_empty(...)\n#define pp_cat_i(x, y) x ## y\n#define pp_cat(x, y) pp_cat_i(x, y)\n\n#define pp_inc0 1\n#define pp_inc1 2\n#define pp_inc2 3\n#define pp_inc3 4\n#define pp_inc4 5\n#define pp_inc5 6\n#define pp_inc6 7\n#define pp_inc7 8\n#define pp_inc8 9\n#define pp_inc(i) pp_cat(pp_inc, i)\n\n// pp args counter\n\n#define pp_arg10(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, ...) _9\n#define pp_has_comma(...) pp_arg10(__VA_ARGS__, 1, 1, 1, 1, 1, 1, 1, 1, 0)\n#define pp_trigger_paren(...) ,\n#define pp_is_empty(...) \\\n  pp_is_empty1( \\\n      pp_has_comma(__VA_ARGS__), \\\n      pp_has_comma(pp_trigger_paren __VA_ARGS__), \\\n      pp_has_comma(__VA_ARGS__()), \\\n      pp_has_comma(pp_trigger_paren __VA_ARGS__()) \\\n      ) \n#define pp_paste5(_0, _1, _2, _3, _4) _0 ## _1 ## _2 ## _3 ## _4\n#define pp_is_empty1(_0, _1, _2, _3) pp_has_comma(pp_paste5(pp_is_empty_case_, _0, _1, _2, _3))\n#define pp_is_empty_case_0001 ,\n\n#define pp_is_one(...) pp_is_one_(__VA_ARGS__, pp_one_seq)\n#define pp_is_one_(...) pp_is_one_n(__VA_ARGS__)\n#define pp_is_one_n(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10, N, ...) N\n#define pp_one_seq 0,0,0,0,0,0,0,0,0,1,0\n\n#define pp_narg(...) \\\n         pp_narg_(__VA_ARGS__, pp_narg_seq)\n#define pp_narg_(...) \\\n         pp_narg_n(__VA_ARGS__)\n#define pp_narg_n( \\\n          _1, _2, _3, _4, _5, _6, _7, _8, _9,_10, \\\n         _11,_12,_13,_14,_15,_16,_17,_18,_19,_20, \\\n         _21,_22,_23,_24,_25,_26,_27,_28,_29,_30, \\\n         _31,_32,_33,_34,_35,_36,_37,_38,_39,_40, \\\n         _41,_42,_43,_44,_45,_46,_47,_48,_49,_50, \\\n         _51,_52,_53,_54,_55,_56,_57,_58,_59,_60, \\\n         _61,_62,_63,n,...) n\n#define pp_narg_seq \\\n         63,62,61,60, \\\n         59,58,57,56,55,54,53,52,51,50, \\\n         49,48,47,46,45,44,43,42,41,40, \\\n         39,38,37,36,35,34,33,32,31,30, \\\n         29,28,27,26,25,24,23,22,21,20, \\\n         19,18,17,16,15,14,13,12,11,10, \\\n          9, 8, 7, 6, 5, 4, 3, 2, 1, 0\n\n// pp if\n#define pp_if_0(x, y) y\n#define pp_if_1(x, y) x\n#define pp_if(cond, x, y) pp_cat(pp_if_, cond)(x, y)\n\n// pp foreach\n#define pp_foreach_i9(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i8(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i7(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i6(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i5(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i4(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i3(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i2(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i1(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i0(i, f, x, ...) f(x) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach_i(i, f, ...) pp_if(pp_is_empty(__VA_ARGS__), pp_empty, pp_cat(pp_foreach_i, i))(pp_inc(i), f, __VA_ARGS__)\n#define pp_foreach(f, ...) pp_foreach_i(0, f, __VA_ARGS__)\n\n// alternative rep macro\n#define rep(...) rep1(rep2, (__VA_ARGS__))\n#define rep1(X, A) X A\n#define rep2(i, ...) pp_if(pp_is_one(__VA_ARGS__), rep_len1(i, __VA_ARGS__), rep3(i, __VA_ARGS__))\n#define rep_len1(i, end, ...) for (int i = 0; i < end; i++)\n#define rep3(i, iter, ...) rep4(rep5, (iter, i, esc_paren __VA_ARGS__))\n#define rep4(X, A) X A\n#define rep5(iter, ...) iter(__VA_ARGS__)\n\n// iterators\n#define up up_iter ,\n#define up_iter3(i, start, end) for (int i = start; i < end; i++)\n#define up_iter4(i, start, end, up) for (int i = start; i < end; i += up)\n#define up_iter(...) pp_cat(up_iter, pp_narg(__VA_ARGS__))(__VA_ARGS__)\n#define down down_iter ,\n#define down_iter2(i, end) for(int i = end-1; i >= 0; i--)\n#define down_iter3(i, start, end) for (int i = end-1; i >= start; i--)\n#define down_iter4(i, start, end, down) for (int i = end-1; i >= start; i -= down)\n#define down_iter(...) pp_cat(down_iter, pp_narg(__VA_ARGS__))(__VA_ARGS__)\n#define viter viter_iter ,\n#define viter_iter(i, v) auto tmpitr=v.begin(); for (auto i=*tmpitr; tmpitr != v.end(); tmpitr++)\n\n// debug macros\n#define debug_var_elem(v) << #v << \"=\" << v << \" \"\n#ifdef DEBUG\n#define debug_echo(e) cout << \"L\" << __LINE__ << \": \" << e << endl\n#define debug_var(...) cout << \"L\" << __LINE__ << \": \" pp_foreach(debug_var_elem, __VA_ARGS__) << endl\n#define debug_ary(ary) cout << \"L\" << __LINE__ << \" [ \"; for(auto ele : ary) cout << ele << \" \"; cout << \"]\" << endl;\n#define debug_time(...) {auto start = clock(); __VA_ARGS__ ;auto end = clock();cout << (double)(end - start) << \"ms\" << endl;} \n#else\n#define debug_echo(e)\n#define debug_var(...)\n#define debug_ary(ary)\n#define debug_time(...)\n#endif\n\n// short names\ntypedef long long ll;\n#define down_queue(...) priority_queue<__VA_ARGS__>\n#define up_queue(...) priority_queue<__VA_ARGS__, vector<__VA_ARGS__>, greater<__VA_ARGS__>>\n#define all(x) x.begin(), x.end()\n#define rall(x) x.begin(), x.end(), greater<int>()\n#define split_str(str, sp_word) istringstream stream(str); string res; for(int cnt = 0; getline(stream,res,sp_word); cnt++)\n#define digit(x) ((int)log10((double)(x)) + 1)\n#define mp(...) make_pair(__VA_ARGS__)\n#define pb(...) push_back(__VA_ARGS__)\n#define pf(...) push_front(__VA_ARGS__)\nvector<int> digit_split(int n){vector<int> result(digit(n));for(int i = 0; n; i++){result[i] = n % 10;n /= 10;}return result;}\n#define vec_cpy(to,from) copy(all(to),back_inserter(from))\n#define ary_cpy(to,from) memcpy(to, from, sizeof(from))\n#define MOD 1000000007 \n\n// math\nll gcd(ll a,ll b){while(b){ll tmp = a % b;a = b;b = tmp;}return a;}\nll lcm(ll a,ll b){return a / gcd(a,b) * b;}\nbool is_prime(ll n){switch(n){case 0:case 1: return false;case 2: return true;}if(n % 2 == 0) return false;for(ll i=3;i * i <= n; i += 2)if(n%i == 0) return false;return true;}\nstring to_qn(ll quaternary, ll from){string result = \"\";if(!from) return \"0\";else{while(from){result = (char)((from % quaternary) + '0') + result;from /= quaternary;}return result;}}\n/*\n// pp unionfind\n#define pp_gen_field(list) pp_gen_field1 list\n#define pp_gen_field1(name, val) decltype(val) name;\n#define pp_gen_init(list) pp_gen_init1 list\n#define pp_gen_init1(name, val) ,val\n#define pp_gen_find_set_wrap(ufnodename) ufnodename pp_gen_find_set\n#define pp_gen_find_set(list) pp_gen_find_set1 list\n#define pp_gen_find_set1(name, val) \\\n  find_set_ ## name(int x, decltype(val) v) { \\\n    if (nodes[x].parent == x) { \\\n      nodes[x].name = v; \\\n      return nodes[x]; \\\n    } else { \\\n      return nodes[x] = find_set_ ## name(nodes[x].parent, v); \\\n    } \\\n  }\n#define pp_gen_unite_set(list) pp_gen_unite_set1 list\n#define pp_gen_unite_set1(name, val) \\\n  if (nodes[x].name == val) { \\\n    find_set_ ## name(x, find(y).name); \\\n  } \\\n  if (nodes[y].name == val) { \\\n    find_set_ ## name(y, find(x).name); \\\n  }\n\n#define def_unionfind(ufname, ufnodename, ...) \\\n  struct ufnodename { \\\n    int parent; \\\n    pp_foreach(pp_gen_field, __VA_ARGS__) \\\n  }; \\\n  struct ufname { \\\n    vector<ufnodename> nodes; \\\n    vector<int> rank; \\\n    ufname(int n) : nodes(n+1), rank(n+1) { \\\n      rep (i in n) { \\\n        nodes[i] = ufnodename{i pp_foreach(pp_gen_init, __VA_ARGS__)}; \\\n        rank[i] = 0; \\\n      } \\\n    } \\\n    ufnodename find(int x) { \\\n      if (nodes[x].parent == x) { \\\n        return nodes[x]; \\\n      } else { \\\n        return nodes[x] = find(nodes[x].parent); \\\n      } \\\n    } \\\n    pp_foreach(pp_gen_find_set_wrap(ufnodename), __VA_ARGS__) \\\n    void unite(int x, int y) { \\\n      x = find(x).parent; \\\n      y = find(y).parent; \\\n      if (x == y) return; \\\n      if (rank[x] < rank[y]) { \\\n        pp_foreach(pp_gen_unite_set, __VA_ARGS__); \\\n        nodes[x].parent = y; \\\n      } else { \\\n        pp_foreach(pp_gen_unite_set, __VA_ARGS__); \\\n        nodes[y].parent = x; \\\n        if (rank[x] == rank[y]) rank[x]++; \\\n      } \\\n    } \\\n    bool same(int x, int y) { \\\n      return find(x).parent == find(y).parent; \\\n    } \\\n  }\n*/\n\nstruct UnionFind {\n  vector<int> data;\n  UnionFind(int size){\n    rep(i in up(0,size)) data.pb(i); \n  }\n\n  void unionSet(int x, int y) {\n    x = root(x);\n    y = root(y);\n    if(x != y) data[y] = data[x];\n  }\n\n  bool findSet(int x, int y) {\n    return root(x) == root(y);\n  }\n\n  int root(int x) {\n    if(data[x] == x) return x;\n    else root(data[x]);\n  }\n\n  int size() {\n    return data.size();\n  }\n};\n\nint main(){\n  int n,b;\n  while(cin >> n, n){\n    rep(i in down(2,n + 1)){\n      if(is_prime(i) && b - i == 2){\n        cout << i << \" \" << b << endl;\n        break;\n      }else if(is_prime(i)){\n        b = i; \n      }\n    } \n  }\n}"}
{"input": "translate Python to C++: P = []\nfor n in range(10000):\n    p = 3\n    c = 0\n    if n % 2 == 0:\n        c += 1\n    else:\n        while p < int(n**0.5) + 1:\n            if n % p != 0:\n                p += 2\n            else:\n                c += 1\n                break\n    if c == 0:\n        P.append(n)\n\nP.reverse()\n\nwhile 1:\n        j = 0\n        n = int(input())\n        if n == 0:\n            break\n        else:\n            for i in range(len(P)):\n                if n >= P[i]:\n                    j = i\n                    break\n            while 1:\n                if P[j]-2 == P[j+1]:\n                    print(P[j+1],P[j])\n                    break\n                else:\n                    j += 1\n\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <string>\n#include <cstring>\n#include <deque>\n#include <list>\n#include <queue>\n#include <stack>\n#include <vector>\n#include <utility>\n#include <algorithm>\n#include <map>\n#include <set>\n#include <complex>\n#include <cmath>\n#include <limits>\n#include <cfloat>\n#include <climits>\n#include <ctime>\n#include <cassert>\n#include <numeric>\n#include <fstream>\n#include <functional>\n#include <bitset>\n\nusing namespace std;\n#define int long long int\nconst int INF = 1001001001001001LL;\nconst int MOD = 1000000007;\n\nint di[] = {-1, 0, 1, 0, -1, 1, 1, -1};\nint dj[] = {0, 1, 0, -1, 1, 1, -1, -1};\n\nconst int MAXN = 1001024;\n\n// \u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\nint prime[MAXN]; // n \u4ee5\u4e0b\u306e\u7d20\u6570\u306e\u3046\u3061 i \u756a\u76ee\u306e\u7d20\u6570\nbool is_prime[MAXN]; // \u6574\u6570 i \u304c\u7d20\u6570\u3067\u3042\u308b\u304b\u3069\u3046\u304b\n\nint sieve(int n) {\n    int res = 0;\n    fill(is_prime, is_prime + MAXN, true);\n    is_prime[0] = is_prime[1] = false; // 0 \u3068 1 \u306f\u7d20\u6570\u3067\u306f\u306a\u3044\u3002\n    for(int i = 2; i <= n; ++i) {\n        if(!is_prime[i]) continue;\n        prime[res++] = i;\n        for(int j = 2 * i; j <= n; j += i) is_prime[j] = false; // \u7d20\u6570 i \u306e\u500d\u6570\u306f\u7d20\u6570\u3067\u306f\u306a\u3044 (\u3075\u308b\u3044(\u7be9)\u306b\u304b\u3051\u308b)\n    }\n    return res;\n}\n\n\nsigned main(){\n\n    sieve(200000);\n    while(1){\n        int n; cin >> n;\n        if(!n) break;\n        int ans = 5;\n        int i = 1;\n        while(1){\n            if(prime[i] > n) break;\n            if(is_prime[prime[i] - 2]){\n                ans = prime[i];\n            }\n            i++;\n        }\n        cout << ans - 2 << \" \" << ans << endl;\n    }\n    return 0;\n}\n\n"}
{"input": "translate Python to C++: # -*- coding: utf-8 -*-\n\"\"\"\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom bisect import bisect_right\ninput = stdin.readline\n\n\ndef create_prime_list(limit):\n    \"\"\" ??\u00a8??????????????????????????\u00a7limit?????\u00a7????\u00b4???\u00b0?????????????\u00b1???????\n    https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9\n    \"\"\"\n    x = limit**0.5\n    primes = []\n    nums = [x for x in range(2, limit+1)]\n    while nums[0]<=x:\n        primes.append(nums[0])\n        current_prime = nums[0]\n        nums = [x for x in nums if x%current_prime != 0]\n    primes.extend(nums)\n    return primes\n\n\ndef main(args):\n    # ??????????\u00b4???\u00b0?????????\n    primes = create_prime_list(10000)\n    twin_primes = []\n    prev = primes[0]\n    for p in primes[1:]:\n        if p == prev + 2:\n            twin_primes.append([prev, p])\n        prev = p\n\n    keys = [x[1] for x in twin_primes]\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        r = bisect_right(keys, n)\n        print(*twin_primes[r-1])\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    \nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n#define rep(i,n) for(int i=0;i<(int)n;i++)\n\nbool is[10010];\n\nint main(){\n  int n;\n\n  rep(i,10010){\n    is[i] = true;\n  }\n  is[1] = is[0] = false;\n  for(int i = 2; i < 10010; i++){\n    for(int j = 2; i*j < 10010; j++){\n      if(is[i] == true){\n\tis[i*j] = false;\n      }\n    }\n  }\n\n  while(1){\n    cin >> n;\n    if(n == 0) break;\n    for(int i = n; i >= 0; i--){\n      if(is[i] && is[i-2]){\n\tcout << i-2 << \" \"<< i << endl;\n\tbreak;\n      }\n    }\n  }\n\n\n\n  return 0;\n}"}
{"input": "translate Python to C++: r = 10001\nsqrt = int(r**0.5)\np = [1]*r\ntwin = [0]*r\np[0] = 0\np[1::2] = [0 for x in range(1,r,2)]\nfor i in range(2,r,2):\n\tif p[i]:\n\t\tp[2*i+1::i+1] = [0 for x in range(2*i+1,r,i+1)]\n\t\tif p[i-2]:\n\t\t\ttwin[i:i+300] = [i+1 for x in range(i,i+300)]\n\t\t\nwhile True:\n\tn = int(raw_input())\n\tif n == 0: break\n\tprint twin[n-1]-2,twin[n-1]\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\nint main(void)\n{\n\tint n,i;\n\twhile(1){\n\tscanf(\"%d\",&n);\n\tif(n==0) break;\n\t\tfor(i=n;i>0;i--){\n\t\t\tif(i==5||i==7){\n\t\t\t\tprintf(\"%d %d\\n\",i-2,i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(i%2!=0&&i%3!=0&&i%5!=0&&i%7!=0){\n\t\t\t\tif((i-2)%2!=0&&(i-2)%3!=0&&(i-2)%5!=0&&(i-2)%7!=0){\n\t\t\t\t\tprintf(\"%d %d\\n\",i-2,i);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}"}
{"input": "translate Python to C++: import bisect as bs\ndef prime(m):\n  N = range(1,m+1, 2)\n  N[0] = 2\n  for i in range(1, int(m**.5)+1):\n    x = N[i]\n    if x: N[i+x::x] = [0] * len(N[i+x::x])\n  return filter(None, N)\n\nP = prime(10000)\nx = [a for a,b in zip(P[1:],P[:-1]) if a-b==2]\nwhile 1:\n  n = input()\n  if n==0: break\n  a = x[bs.bisect_right(x, n)-1]\n  print a-2, a\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <algorithm>\n#include <cmath>\n#include <iostream>\n#include <list>\n#include <vector>\n\nconstexpr bool divisible(const std::size_t n, const std::size_t m)\n{\n    return (0 == n % m);\n}\n\nstd::vector<std::size_t> prime_table = {2};\n\nbool prime(const std::size_t n)\n{\n    const std::size_t found_last_prime = prime_table.back();\n    if(found_last_prime < n)\n    {\n        std::list<std::size_t> undefined_table;\n\n        for(std::size_t i = found_last_prime + 1; i < n; ++i)\n        {\n            undefined_table.push_back(i);\n        }\n\n        const std::size_t sn = std::sqrt(n);\n        for(std::size_t p = 0; !undefined_table.empty() && p < prime_table.size(); ++p)\n        {\n            for(auto u = undefined_table.begin(); u != undefined_table.end();)\n            {\n                if(divisible(*u, prime_table.at(p)))\n                {\n                    u = undefined_table.erase(u);\n                }\n                else\n                {\n                    ++u;\n                }\n            }\n            if(!undefined_table.empty() && found_last_prime <= prime_table.at(p))\n            {\n                prime_table.push_back(undefined_table.front());\n                undefined_table.pop_front();\n                if(sn < prime_table.front())\n                {\n                    break;\n                }\n            }\n        }\n        prime_table.insert(prime_table.end(), undefined_table.begin(), undefined_table.end());\n    }\n    return std::binary_search(prime_table.begin(), prime_table.end(), n);\n}\n\nstd::pair<std::size_t, std::size_t> find_twin_prime(const std::size_t limit, const bool next_skip = false)\n{\n    return prime(limit) ?\n        prime(limit - 2) ?\n        std::make_pair(limit - 2, limit) :\n        find_twin_prime(limit - (next_skip ? 3 : 1), true) :\n        find_twin_prime(limit - (next_skip ? 2 : 1), false);\n}\n\nint main()\n{\n    std::size_t n;\n\n    while(std::cin >> n, n != 0)\n    {\n        const auto&& t = find_twin_prime(n);\n        std::cout << t.first << \" \" << t.second << std::endl;\n    }\n}"}
{"input": "translate Python to C++: r = 10001\nsqrt = int(r**0.5)\np = [1]*r\ntwin = [0]*r\np[0] = 0\np[1::2] = [0 for x in range(1,r,2)]\nfor i in range(2,r,2):\n\tif p[i]:\n\t\tp[2*i+1::i+1] = [0 for x in range(2*i+1,r,i+1)]\n\t\tif p[i-2]:\n\t\t\ttwin[i:i+100] = [i+1 for x in range(i,i+100)]\n\t\t\nwhile True:\n\tn = int(raw_input())\n\tif n == 0: break\n\tprint twin[n-1]-2,twin[n-1]\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\n\nint isprime(int n) {\n\tint i;\n    for(int i = 2; i * i <= n; i++) {\n        if(n % i == 0) return 0;\n    }\n    return 1; \n}\n\nint main(){\n\tint k,g,j,suu,an1,an2;\n\tint su[10000]={1};\n    for(k=0;k<10000;k++){\n    \tif(isprime(k)==1){\n    \t\tj=0;\n    \t\tfor(g=2;j<=10000;g++){\n    \t\t\tj=g*k;\n    \t\t\tsu[j]=0;\n    \t\t}\n    \t}  \n    }\n    while(1){\n        scanf(\"%d\",&suu);\n        if(suu != 0){\n            for(k=2;k<=suu;k++){\n            \tif(su[k-2]==1 && su[k]==1){\n        \t    \tan1=k-2;\n        \t    \tan2=k;\n            \t}\n            }\n            printf(\"%d %d\\n\",an1,an2);\n        }\n        else{\n    \t    break;\n        }\n    }\n    return 0; \n}"}
{"input": "translate Python to C++: from itertools import takewhile\npnum, tmp = [], [int(i) for i in range(2, 10000)]\nwhile tmp[0] < 101:\n    v = tmp.pop(0)\n    pnum.append(v)\n    tmp = list(filter(lambda x: x%v!=0, tmp))\nfor t in tmp: pnum.append(t)\ndel pnum[0:2]\nwhile True:\n    n = int(input())\n    if n==0: break\n    prime = list(takewhile(lambda x: x<=n, pnum))\n    for i in range(len(prime))[:0:-1]:\n        if prime[i]-prime[i-1]==2:\n            print(prime[i-1], prime[i])\n            break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<stdio.h>\nint main()\n{\n\tint i,j,n;\n\tconst int N=10001;\n\tbool p[N];\n\tfor(i=2;i<N;++i)p[i]=true;\n\tfor(i=2;i<=N/2;++i)if(p[i])for(j=2*i;j<N;j+=i)p[j]=false;\n\twhile(scanf(\"%d\",&n),n){for(i=n;;--i)if(p[i]&&p[i-2])break;printf(\"%d %d\\n\",i-2,i);}\n\treturn 0;\n}"}
{"input": "translate Python to C++: MN = 10000\ntp = []\nop = -5\nmem = [False * 2] + [True] * MN\nfor i in range(2, MN):\n  if not mem[i]:\n    continue\n  if i - op == 2:\n    tp.append((op, i))\n  op = i\n  for j in range(i + i, MN, i):\n    mem[j] = False\n\nwhile True:\n  N = input()\n  if not N:\n    break\n  for i, p in enumerate(tp):\n    if p[1] > N:\n      print('%d %d' % (tp[i - 1][0], tp[i - 1][1]))\n      break\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 10001;\nbool isPrime[MAXN];\n\nint main() {\n  fill(isPrime, isPrime+MAXN, true);\n  isPrime[0] = isPrime[1] = false;\n  for(int i = 2; i < MAXN; ++i) {\n    if(isPrime[i])\n      for(int j = i*2; j < MAXN; j += i) isPrime[j] = false;\n  }\n\n  int n;\n  while(cin >> n && n) {\n    int p, q;\n    for(int x = 3; x+2 <= n; ++x) {\n      if(isPrime[x] && isPrime[x+2]) {\n        p = x;\n        q = x+2;\n      }\n    }\n    cout << p << \" \" << q << endl;\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: import math\n\nisPrime = [True] * 10001\nprimes = []\ndef eratos(n):\n    isPrime[0] = isPrime[1] = False\n    for i in range(2,int(math.sqrt(n))):\n        if isPrime[i]:\n            j = 2 * i\n            while j <= n:\n                isPrime[j] = False\n                j = j + i\n    for i in range(2,10000):\n        if isPrime[i]:\n            primes.append(i)\neratos(10000)\n\nwhile True:\n    try:\n        n = int(input())\n        if n == 0:\n            break\n        for i in range(n,2,-1):\n            if isPrime[i]:\n                if isPrime[i - 2]:\n                    print(i - 2,i)\n                    break\n    except EOFError:\n        break\n            \n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\nconst int MAX_V = 10000;\nint prime[MAX_V+1];\nint main(){\n  int i,k,n,j,i1,i2,max = 0,p1,q1;\n  for(i = 2;i <= MAX_V;i++){\n    prime[i] = 1;\n  }\n  for(i = 2;i*i <= MAX_V;i++){\n    if(prime[i]){\n      for(k = 2 * i;k <= MAX_V;k += i){\n        prime[k] = 0;\n      }\n    }\n  }\n  while(1){\n    scanf(\"%d\",&n);\n    if(n == 0){\n      break;\n    }\n    for(j = 0;j + 2 < n;j++){\n      int isprime = prime[j];\n      int isprime2 = prime[j + 2];\n      if(isprime) i1 = 1;else i1 = 0;\n      if(isprime2) i2 = 1;else i2 = 0;\n      if(i1 == 1 && i2 == 1){\n        max = j;\n      }\n    }\n    p1 = max;\n    q1 = max + 2;\n    printf(\"%d %d\\n\",p1,q1);\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: def primes(n):\n  tf = [True] * (n + 1)\n  tf[0] = tf[1] = False\n  for i in range(2, int(n ** (1 / 2)) + 1):\n    if tf[i]:\n      for j in range(i ** 2, n + 1, i):\n        tf[j] = False\n  return [i for i in range(n, -1, -1) if tf[i]]\n\ndef search_twin(prime_lst):\n  prime_lst2 = prime_lst[1:]\n  for x, y in zip(prime_lst, prime_lst2):\n    if x - y == 2:\n      return (y, x)\n\nwhile True:\n  n = int(input())\n  if n == 0:\n    break\n  prime_lst = primes(n)\n  print(*search_twin(prime_lst))\n\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include<iostream>\n#define loop(i,a,b) for(int i=a;i<b;i++)\n#define rep(i,a) loop(i,0,a)\nusing namespace std;\n\nint main(){\n  bool prime[100000];\n  prime[0]=prime[1]=0;\n  loop(i,2,100000){\n    prime[i]=true;\n  }\n  for(int i=2;i<=100000;i++){\n    for(int j=2;i*j<=100000;j++){\n      prime[i*j]=false;\n    }\n  }\n  int n,m,ans1,ans2;\n  while(cin>>n,n){\n    for(int i=2;i<=n;i++){\n      if(prime[i]){\n\tm=i;\n\ti++;\n\twhile(!prime[i])i++;\n\tif(i>n)break;\n\tif((i-m)==2){\n\t  ans1=m;\n\t  ans2=i;\n\t}\n\ti--;\n      }\n    }\n    cout<<ans1<<\" \"<<ans2<<endl;\n  }\n  return 0;\n}"}
{"input": "translate Python to C++: # Aizu Problem 00150: Twin Prime\n#\nimport sys, math, os, bisect\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef primes2(n):\n    \"\"\" Input n>=6, Returns a list of primes, 2 <= p < n \"\"\"\n    n, correction = n-n%6+6, 2-(n%6>1)\n    sieve = [True] * (n//3)\n    for i in range(1,int(n**0.5)//3+1):\n      if sieve[i]:\n        k=3*i+1|1\n        sieve[      k*k//3      ::2*k] = [False] * ((n//6-k*k//6-1)//k+1)\n        sieve[k*(k-2*(i&1)+4)//3::2*k] = [False] * ((n//6-k*(k-2*(i&1)+4)//6-1)//k+1)\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\n\nprimes = primes2(10000)\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    idx = bisect.bisect_left(primes, n)\n    while True:\n        if idx == len(primes):\n            idx -= 1\n        if primes[idx] >= n:\n            idx -= 1\n        if primes[idx] - primes[idx - 1] == 2:\n            print(primes[idx - 1], primes[idx])\n            break\n        idx -= 1\nGiven input: 12\n100\n200\n300\n0\n\nExpected output: 5 7\n71 73\n197 199\n281 283\n", "output": "#include <stdio.h>\n\nint main() {\n    int i, k, v,an1,an2,suu;\n    int MAX_V = 10000;\n    int prime[MAX_V+1];\n    for(i = 2; i <= MAX_V; i++) {\n        prime[i] = 1;\n    }\n    for(i = 2; i*i <= MAX_V; i++) {\n        if(prime[i]) {\n            for(k = 2 * i; k <= MAX_V; k += i) {\n                prime[k] = 0;   \n            } \n        }\n    }\n   while(1){\n        scanf(\"%d\",&suu);\n        if(suu != 0){\n            for(k=2;k<=suu;k++){\n            \tif(prime[k-2]==1 && prime[k]==1){\n        \t    \tan1=k-2;\n        \t    \tan2=k;\n            \t}\n            }\n            printf(\"%d %d\\n\",an1,an2);\n        }\n        else{\n    \t    break;\n        }\n    }\n    return 0; \n}"}
